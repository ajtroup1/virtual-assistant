SAM v2 capabilities:

**Some capabilities like spotify and finance requre Djano db to be running so run python manage.py runserver

You must indicate a message is intended for sam: "sam, {message}"

After 'sam' is included, use references to structure your command:

"sam, help" returns this txt

exit using "sam, exit"

clear the screen at any time by saying "sam, clear"

Voice "sam, say {message}":
	says anything on command

Web Navigation "sam, navigate to {name of website}":
	no need to include https or .com

Spotify integration "sam, spotify {command}"
	Playback controller:
		'play'
		'pause'
		'skip'
		'rewind'
		'turn it up'
		'turn it down'
	Favorite songs:
		Favorite a song "sam favorite this song"
		See your favorited songs "sam show me my favorited songs"
	Queue a favorited song by id or a random favorited song from a artist:
		"sam queue a song by id"
		"sam queue a song by artist"
			-sam will ask you for either an id or artist
		
Timer "sam set a timer"

Finance capabilities:
	Stocks:
		Web scrape for info about a stock "sam, scrape for stock information"
			Saves to db
		Get stock information from previous scrapes "sam, pull up stock info"

Weather reporting
	Concise report "sam what's the weather like" "sam describe the weather"
	Detailed weather report "sam full weather report"